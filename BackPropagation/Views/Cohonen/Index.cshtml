@model BackPropagation.Models.CohonenDataModels
@{
    ViewBag.Title = "Index";
}

<h3></h3>

@using (Html.BeginForm("Index", "Cohonen", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <h4>Please Input information for Cohonen Map algorithm!</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <h3>Data &amp; info:</h3>
        <div class="form-group">
            <label class="control-label col-md-2" for="file">Upload Data:</label>
            <div class="col-md-10">
                <input class="form-control" type="file" name="file" id="file" />
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" for="name">Set name</label>
            <div class="col-md-10">
                <input class="form-control" type="text" id="name" name="name" value="" /><br />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.numX, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.numX, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.numX, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.numY, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.numY, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.numY, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.numIter, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.numIter, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.numIter, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.gamma, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.gamma, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.gamma, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.radius, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.radius, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.radius, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input class="btn btn-default" type="submit" value="Submit" />
            </div>
        </div>

    </div>
}

@{
    string error = ViewBag.Error as string;
    if (error != null)
    {
        <h2>@error</h2>
    }
}
